# This is a basic workflow to help you get started with Actions
name: 'AppFinder Build'

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    strategy:
      matrix:
        node-version: [18]
        platform: [ windows-latest]

    # The type of runner that the job will run on
    runs-on: ${{ matrix.platform }}

    steps:
    
    - name: Check out my other private repo    
      uses: actions/checkout@v2
      with: 
        repository: appfinder/appfinder_rs
        token: ${{ secrets.my_pat }}



    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm`
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: install rust stable
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal

    - name: Install Dependencies
      run: npm i && npm i -D cli-truncate

    # - name: Check lint
    #   run: npm run lint

    # - name: Run headless unit test
    #   if: matrix.platform == 'ubuntu-latest'
    #   uses: GabrielBB/xvfb-action@v1
    #   with:
    #     run: npm run test


    - name: Get Package Version
      id: get_version
      run: echo "##[set-output name=version]$(node -p "require('./package.json').version")"

    
    - name: Use Package Version in Another Step
      run: echo "The package version is ${{ steps.get_version.outputs.version }}"
  


    - name: build tauri app
      uses: tauri-apps/tauri-action@v0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

    - name: create public release
      id: create-public-release
      uses: actions/github-script@v6
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: 'appfinder',
              repo: 'app-finder-releases',
              tag_name: "AppFinder-v${{steps.get_version.outputs.version}}",
              name: `AppFinder-v${{steps.get_version.outputs.version}}`,
              body: 'Take a look at the assets to download and install this app.',
              draft: false,
              prerelease: false
            })
            return data.id
    

    - name: Upload files to release
      uses: xresloader/upload-to-github-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        file: "**/appfinder_*_x64_en-US.ms*"
        tags: true
        draft: false
        release_id: steps.create-public-release.outputs